package it.polimi.ramses.knowledge.parser;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import it.polimi.ramses.knowledge.domain.architecture.Service;
import it.polimi.ramses.knowledge.domain.persistence.Vulnerability;

import java.io.Reader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class VulnerabilityParser {
    public static Map<String, List<Vulnerability>> parse(Reader json, List<Service> services) {
        Map<String, List<Vulnerability>> servicesVulnerabilities = new HashMap<>();
        Gson gson = new Gson();
        JsonObject servicesJson = gson.fromJson(json, JsonObject.class);

        for (Map.Entry<String, JsonElement> entry : servicesJson.entrySet()) {
            String serviceName = entry.getKey();
            JsonArray vulnerabilitiesArray = entry.getValue().getAsJsonArray();

            List<Vulnerability> vulnerabilityList = new LinkedList<>();
            for (JsonElement vulnerabilityElement : vulnerabilitiesArray) {
                JsonObject vulnerabilityObject = vulnerabilityElement.getAsJsonObject();

                for (Map.Entry<String, JsonElement> jarEntry : vulnerabilityObject.entrySet()) {
                    String jarName = jarEntry.getKey();
                    JsonArray cveArray = jarEntry.getValue().getAsJsonArray();

                    for (JsonElement cveElement : cveArray) {
                        JsonObject cveObject = cveElement.getAsJsonObject();
                        for (Map.Entry<String, JsonElement> cveEntry : cveObject.entrySet()) {
                            String cveId = cveEntry.getKey();
                            JsonObject cveDetails = cveEntry.getValue().getAsJsonObject();
                            double baseScore = cveDetails.get("baseScore").getAsDouble();
                            boolean isDisputed = cveDetails.getAsJsonObject("flags").get("disputed").getAsBoolean();
                            boolean isRejected = cveDetails.getAsJsonObject("flags").get("rejected").getAsBoolean();

                            Service service = services.stream()
                                    .filter(s -> s.getPossibleImplementations().values().stream()
                                            .anyMatch(impl -> impl.getImplementationId().equals(serviceName)))
                                    .findFirst()
                                    .orElse(null);
                            String serviceId = service != null ? service.getServiceId() : null;

                            Vulnerability vulnerability = new Vulnerability(serviceId, serviceName, jarName, cveId, baseScore, isDisputed, isRejected);
                            vulnerabilityList.add(vulnerability);
                        }
                    }
                }
            }

            servicesVulnerabilities.put(serviceName, vulnerabilityList);
        }

        return servicesVulnerabilities;
    }
}
